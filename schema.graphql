"Entry point for all information related to index products"
type Index @entity(immutable:false) {
  id: Bytes!
  name: String!
  symbol: String!
  version: ProtocolVersion!
  creationDate: BigInt!
  decimals: Int!
  chainID: BigInt!
  mintingFee: BigDecimal!
  redemptionFee: BigDecimal!
  aumFee: BigDecimal!
  k: BigInt
  isRebalancing: Boolean
  anatomy: Anatomy @derivedFrom(field: "index")
  lzConfig: LZConfig @derivedFrom(field: "index")
  config: Config @derivedFrom(field: "index")
  totalFees: BigDecimal
  totalSupply: BigDecimal!
  holders: BigInt!
  assets: [ChainIDToAssetMapping!]!
  history: [HistoricalIndexBalance!]! @derivedFrom(field: "index")
}

"Entry point for all information related to accounts"
type Account @entity(immutable:false) {
  id: Bytes!
  indices: [IndexAccount!]! @derivedFrom(field: "account")
  history: [HistoricalAccountBalance!]! @derivedFrom(field: "account")
}

type IndexAsset @entity(immutable:false) {
  id: String!
  chainID: BigInt!
  symbol: String!
  name: String!
  decimals: Int!
  currencyID: BigInt
  index: Bytes!
  asset: Bytes!
  balance: BigDecimal!
  weight: BigInt
}

type IndexAccount @entity(immutable:false) {
  id: Bytes!
  index: Bytes!
  account: Account!
  balance: BigDecimal!
}

type HistoricalIndexBalance @entity(immutable:false) {
  id: String!
  timestamp: BigInt!
  index: Index!
  totalSupply: BigDecimal!
  assets: [HistoricalIndexAsset!]!
}

type HistoricalAccountBalance @entity(immutable:false) {
  id: String!
  timestamp: BigInt!
  index: Bytes!
  account: Account!
  balance: BigDecimal!
}

type HistoricalIndexAsset @entity(immutable:false) {
  id: String!
  indexTimestamp: HistoricalIndexBalance!
  index: Bytes!
  asset: Bytes!
  chainID: BigInt!
  timestamp: BigInt!
  balance: BigDecimal!
  weight: BigInt
}

type HistoricalPrice @entity(immutable:false) {
  id: String!
  index: Bytes!
  timestamp: BigInt!
  price: BigDecimal!
  apy: BigDecimal!
}

enum ProtocolVersion {
  Undefined
  v1
  v2
  v3
}

type ChainIDToAssetMapping @entity(immutable:false) {
  id: String!
  index: Bytes!
  chainID: BigInt!
  chainIndex: BigInt
  latestSnapshot: BigInt
  registeredAssets: BigInt
  assets: [IndexAsset!]!
}

type Config @entity(immutable:false) {
  id: Bytes!
  index: Index!
  AUMDilutionPerSecond: BigInt!
  useCustomAUMFee: Boolean!
  metadata: Bytes!
  depositFeeInBP: BigInt!
  depositCustomCallback: Boolean!
  redemptionFeeInBP: BigInt!
  redemptionCustomCallback: Boolean!
}

type LZConfig @entity(immutable:false) {
  id: Bytes!
  index: Index!
  eIds: BigInt!
  minGas: [BigInt!]!
}

type Anatomy @entity(immutable:false) {
  id: Bytes!
  index: Index!
  chainIdSet: [BigInt!]!
  currencyIdSets: [CurrencySet!]!
}

type CurrencySet @entity(immutable:false) {
  id: String!
  index: Bytes!
  chainIndex: BigInt!
  sets: [BigInt!]!
}

type JooceReward @entity(immutable:true) {
  id: ID!
  from: Bytes!
  to: Bytes!
  value: BigInt!
  timestamp: BigInt!
}


type JoocePrice @entity(immutable:false) {
  id: String!
  timestamp : BigInt!
  price : BigDecimal!
}
