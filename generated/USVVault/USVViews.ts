// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class USVViews__getHighestYieldMarketParametersResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: Address;

  constructor(value0: BigInt, value1: BigInt, value2: i32, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getMaturity(): BigInt {
    return this.value0;
  }

  getMinImpliedRate(): BigInt {
    return this.value1;
  }

  getCurrencyId(): i32 {
    return this.value2;
  }

  getCalculationViews(): Address {
    return this.value3;
  }
}

export class USVViews extends ethereum.SmartContract {
  static bind(address: Address): USVViews {
    return new USVViews("USVViews", address);
  }

  BP(): i32 {
    let result = super.call("BP", "BP():(uint16)", []);

    return result[0].toI32();
  }

  try_BP(): ethereum.CallResult<i32> {
    let result = super.tryCall("BP", "BP():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAPY(_savingsVault: Address): BigInt {
    let result = super.call("getAPY", "getAPY(address):(uint256)", [
      ethereum.Value.fromAddress(_savingsVault)
    ]);

    return result[0].toBigInt();
  }

  try_getAPY(_savingsVault: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getAPY", "getAPY(address):(uint256)", [
      ethereum.Value.fromAddress(_savingsVault)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHighestYieldMarketParameters(
    _savingsVault: Address
  ): USVViews__getHighestYieldMarketParametersResult {
    let result = super.call(
      "getHighestYieldMarketParameters",
      "getHighestYieldMarketParameters(address):(uint256,uint32,uint16,address)",
      [ethereum.Value.fromAddress(_savingsVault)]
    );

    return new USVViews__getHighestYieldMarketParametersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toAddress()
    );
  }

  try_getHighestYieldMarketParameters(
    _savingsVault: Address
  ): ethereum.CallResult<USVViews__getHighestYieldMarketParametersResult> {
    let result = super.tryCall(
      "getHighestYieldMarketParameters",
      "getHighestYieldMarketParameters(address):(uint256,uint32,uint16,address)",
      [ethereum.Value.fromAddress(_savingsVault)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new USVViews__getHighestYieldMarketParametersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toAddress()
      )
    );
  }

  getMaxDepositedAmount(_savingsVault: Address): BigInt {
    let result = super.call(
      "getMaxDepositedAmount",
      "getMaxDepositedAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_savingsVault)]
    );

    return result[0].toBigInt();
  }

  try_getMaxDepositedAmount(
    _savingsVault: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxDepositedAmount",
      "getMaxDepositedAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_savingsVault)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  scaleAmount(
    _savingsVault: Address,
    _amount: BigInt,
    _percentage: BigInt,
    _steps: BigInt
  ): BigInt {
    let result = super.call(
      "scaleAmount",
      "scaleAmount(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_savingsVault),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_percentage),
        ethereum.Value.fromUnsignedBigInt(_steps)
      ]
    );

    return result[0].toBigInt();
  }

  try_scaleAmount(
    _savingsVault: Address,
    _amount: BigInt,
    _percentage: BigInt,
    _steps: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "scaleAmount",
      "scaleAmount(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_savingsVault),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_percentage),
        ethereum.Value.fromUnsignedBigInt(_steps)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  scaleWithBinarySearch(
    _savingsVault: Address,
    _amount: BigInt,
    _steps: BigInt
  ): BigInt {
    let result = super.call(
      "scaleWithBinarySearch",
      "scaleWithBinarySearch(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_savingsVault),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_steps)
      ]
    );

    return result[0].toBigInt();
  }

  try_scaleWithBinarySearch(
    _savingsVault: Address,
    _amount: BigInt,
    _steps: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "scaleWithBinarySearch",
      "scaleWithBinarySearch(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_savingsVault),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_steps)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}
