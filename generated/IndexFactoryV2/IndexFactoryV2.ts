// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deployed extends ethereum.Event {
  get params(): Deployed__Params {
    return new Deployed__Params(this);
  }
}

export class Deployed__Params {
  _event: Deployed;

  constructor(event: Deployed) {
    this._event = event;
  }

  get index(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get reserve(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get governance(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class IndexFactoryV2 extends ethereum.SmartContract {
  static bind(address: Address): IndexFactoryV2 {
    return new IndexFactoryV2("IndexFactoryV2", address);
  }

  deploy(
    _name: string,
    _symbol: string,
    _reserve: Address,
    _governance: Address,
    _messenger: Address,
    _maxDepositFeeInBPs: i32,
    _maxRedemptionFeeInBPs: i32,
    _maxAUMDilutionPerSecond: BigInt
  ): Address {
    let result = super.call(
      "deploy",
      "deploy(string,string,address,address,address,uint16,uint16,uint256):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddress(_reserve),
        ethereum.Value.fromAddress(_governance),
        ethereum.Value.fromAddress(_messenger),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_maxDepositFeeInBPs)),
        ethereum.Value.fromUnsignedBigInt(
          BigInt.fromI32(_maxRedemptionFeeInBPs)
        ),
        ethereum.Value.fromUnsignedBigInt(_maxAUMDilutionPerSecond)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy(
    _name: string,
    _symbol: string,
    _reserve: Address,
    _governance: Address,
    _messenger: Address,
    _maxDepositFeeInBPs: i32,
    _maxRedemptionFeeInBPs: i32,
    _maxAUMDilutionPerSecond: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy",
      "deploy(string,string,address,address,address,uint16,uint16,uint256):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddress(_reserve),
        ethereum.Value.fromAddress(_governance),
        ethereum.Value.fromAddress(_messenger),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_maxDepositFeeInBPs)),
        ethereum.Value.fromUnsignedBigInt(
          BigInt.fromI32(_maxRedemptionFeeInBPs)
        ),
        ethereum.Value.fromUnsignedBigInt(_maxAUMDilutionPerSecond)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  indices(): Array<Address> {
    let result = super.call("indices", "indices():(address[])", []);

    return result[0].toAddressArray();
  }

  try_indices(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("indices", "indices():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _reserve(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _governance(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _messenger(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _maxDepositFeeInBPs(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _maxRedemptionFeeInBPs(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get _maxAUMDilutionPerSecond(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get index(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
