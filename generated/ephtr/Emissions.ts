// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Emissions extends ethereum.SmartContract {
  static bind(address: Address): Emissions {
    return new Emissions("Emissions", address);
  }

  distributedPerBlock(): BigInt {
    let result = super.call(
      "distributedPerBlock",
      "distributedPerBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_distributedPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributedPerBlock",
      "distributedPerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawable(): BigInt {
    let result = super.call("withdrawable", "withdrawable():(uint256)", []);

    return result[0].toBigInt();
  }

  try_withdrawable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdrawable", "withdrawable():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class SetDistributionCall extends ethereum.Call {
  get inputs(): SetDistributionCall__Inputs {
    return new SetDistributionCall__Inputs(this);
  }

  get outputs(): SetDistributionCall__Outputs {
    return new SetDistributionCall__Outputs(this);
  }
}

export class SetDistributionCall__Inputs {
  _call: SetDistributionCall;

  constructor(call: SetDistributionCall) {
    this._call = call;
  }

  get _distributedPerBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDistributionCall__Outputs {
  _call: SetDistributionCall;

  constructor(call: SetDistributionCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
